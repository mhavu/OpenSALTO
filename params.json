{"name":"Opensalto","tagline":"Signal analysis tool","body":"OpenSALTO\r\n=========\r\n\r\nOpenSALTO is an open source signal analysis tool. It is released under\r\nthe GNU General Public License version 3 or later.\r\n\r\nOpenSALTO includes an extensible backend for reading in signals,\r\nexporting them in a different file format, performing computations on\r\nthem, and reporting the results of the analysis. A GUI frontend is\r\nalso being developed.\r\n\r\n#Plugin API\r\n\r\nOpenSALTO has plugin APIs for adding support for new file formats,\r\nfiltering and performing calculations, and reporting the results of\r\nthe analysis.\r\n\r\n##Import and Export Plugins\r\n\r\nSupport for new file formats can be added via plugins. Support can be\r\nadded for any kind of signal. Current and planned plugins add support\r\nfor signals including accelerometry, actigraphy, audio, ECG, EEG, EMG,\r\nforce, pressure, heartrate, and so on.\r\n\r\nPlugins read or write one or more channels with corresponding metadata.\r\nThe metadata includes:\r\n- channel names\r\n- sample rates\r\n- original resolution\r\n- start time\r\n- end time\r\n- mark and model of the device that was used to acquire the data\r\n- serial number of the device\r\n- units (V, A, m, m/s, m/s/s, N, Pa, %, etc.)\r\n- any other metadata as a JSON dictionary.\r\n\r\nA list of events with event types, start times and end times may also\r\nbe included. Channels may have different sample rates, durations and\r\nstart times.\r\n\r\n##Computation Plugins\r\n\r\nFilters and calculation and report plugins are modules that perform\r\ncomputations on one or more channels. Filters return one or more new\r\nchannels as a result, whereas calculation and report plugins return\r\ndescriptive values, graphs and so on.\r\n\r\n##API\r\n\r\nThe plugins are expected to implement the following functions:\r\n```C\r\nint initPlugin(void *handle);\r\nconst char *describeError(int err);\r\nsize_t nOutputChannels(const char* computation, size_t nInputChannels); // Computation plugins only\r\n```\r\n\r\nThe plugins register themselves using the following functions:\r\n```C\r\nint registerFileFormat(void *handle, const char *format, const char **exts, size_t n_exts);\r\nint registerImportFunc(void *handle, const char *format, const char *funcname); // funcname is of type ReadFileFunc\r\nint registerExportFunc(void *handle, const char *format, const char *funcname); // funcname is of type WriteFileFunc\r\nint registerComputation(void *handle, const char *name, const char *funcname,\r\n                        ComputationArgs *inputs, ComputationArgs *outputs); // funcname is of type ComputeFunc\r\ntypedef int (*ReadFileFunc)(const char *filename, const char *chTable);\r\ntypedef int (*WriteFileFunc)(const char *filename, const char *chTable);\r\ntypedef int (*ComputeFunc)(void *inputs, void *outputs);\r\n```\r\n\r\nThe following functions are available for the plugins:\r\n```C\r\nconst char *newChannelTable(const char *name);\r\nvoid deleteChannelTable(const char *name);\r\nconst char *getUniqueName(const char *chTable, const char *name);\r\nconst char **getChannelNames(const char *chTable, size_t *size);\r\n\r\nuint8_t *newUInt8Channel(const char *chTable, const char *name, size_t length);\r\nuint16_t *newUInt16Channel(const char *chTable, const char *name, size_t length);\r\nuint32_t *newUInt32Channel(const char *chTable, const char *name, size_t length);\r\nint8_t *newInt8Channel(const char *chTable, const char *name, size_t length);\r\nint16_t *newInt16Channel(const char *chTable, const char *name, size_t length);\r\nint32_t *newInt32Channel(const char *chTable, const char *name, size_t length);\r\nfloat *newFloatChannel(const char *chTable, const char *name, size_t length);\r\ndouble *newDoubleChannel(const char *chTable, const char *name, size_t length);\r\nint newCollectionChannel(const char *chTable, const char *name, const char *fromChannelTable, void *fillValues);\r\nvoid deleteChannel(const char *chTable, const char *name);\r\nint moveChannel(const char *fromChannelTable, const char *name, const char *toChannelTable);\r\nint copyChannel(const char *fromChannelTable, const char *name, const char *toChannelTable);\r\n\r\nvoid *getChannelData(const char *chTable, const char *name, size_t *length);\r\nconst char *getChannelName(const char *chTable, void *dataPtr);\r\n\r\nint setScaleAndOffset(const char *chTable, const char *ch, double scale, double offset);\r\ndouble scale(const char *chTable, const char *ch);\r\ndouble offset(const char *chTable, const char *ch);\r\nint setUnit(const char *chTable, const char *ch, const char *unit);\r\nconst char *unit(const char *chTable, const char *ch);\r\nint setSignalType(const char *chTable, const char *ch, const char *type);\r\nconst char *signalType(const char *chTable, const char *ch);\r\nint setResolution(const char *chTable, const char *ch, int resolution);\r\nint resolution(const char *chTable, const char *ch);\r\nint setSampleRate(const char *chTable, const char *ch, double samplerate);\r\ndouble sampleRate(const char *chTable, const char *ch);\r\nint setStartTime(const char *chTable, const char *ch, struct timespec start);\r\nstruct timespec startTime(const char *chTable, const char *ch);\r\nstruct timespec endTime(const char *chTable, const char *ch);\r\nsize_t length(const char *chTable, const char *ch);\r\ndouble duration(const char *chTable, const char *ch);\r\nint setDevice(const char *chTable, const char *ch, const char *device, const char *serial);\r\nconst char *device(const char *chTable, const char *ch);\r\nconst char *serial(const char *chTable, const char *ch);\r\nint setMetadata(const char *chTable, const char *ch, const char *json);\r\nconst char *metadata(const char *chTable, const char *ch, MetadataFields fields);\r\n\r\nint addEvent(const char *chTable, const char *ch, Event *event);\r\nint removeEvent(const char *chTable, const char *ch, Event *event);\r\nEvent **getEvents(const char *chTable, const char *ch, size_t *size);\r\nvoid clearEvents(const char *chTable, const char *ch);\r\n\r\nEvent *newEvent(EventVariety type, const char *subtype, struct timespec start, struct timespec end, const char *description);\r\nvoid discardEvent(Event *event);\r\nconst char *channelsWithEventType(const char *chTable, EventVariety type, const char *subtype);\r\nint setEventType(Event *event, EventVariety type, const char *subtype);\r\nint moveEvent(Event *event, struct timespec start, struct timespec end);\r\nint setEventDescription(Event *event, const char *description);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}